@model RandomSiteControlsMVC.MVC.Models.DocumentTree.DocumentTreeModel

@using Telerik.Sitefinity.Modules.Pages;
@using Telerik.Sitefinity.Frontend.Mvc.Helpers;
@using Telerik.Sitefinity;
@using Telerik.Sitefinity.Mvc;
@using RandomSiteControlsMVC.Helpers;
@using Telerik.Sitefinity.Services;
@using RandomSiteControlsMVC.MVC.Models.DocumentTree


@Html.StyleSheet(Url.EmbeddedResource("RandomSiteControlsMVC.Reference", "RandomSiteControlsMVC.MVC.Views.DocumentTree.Resources.documenttree.min.css"), "head")

@functions{
    /// <summary>
    /// This just converts extension names into fontawesome class names, not using fontawesome... do whatever you need
    /// </summary>
    public string GetIconClassName(string extension)
    {

        switch (extension)
        {
            case "pptx":
                return "far fa-file-powerpoint";
            case "ppt":
                return "far fa-file-powerpoint";
            case "xlsx":
                return "far fa-file-excel";
            case "xls":
                return "far fa-file-excel";
            case "docx":
                return "far fa-file-word";
            case "doc":
                return "far fa-file-word";
            case "pdf":
                return "far fa-file-pdf";
            case "zip":
                return "far fa-file-archive";
            default:
                return "far fa-file";
        }
    }
}


<div class="sfs-document-tree simple" data-mode="simple" data-expand-levels="@Model.ExpandLevelDepth">
    <ul class="root">
        @foreach (var node in Model.Nodes)
        {
            @RenderSubLevelsRecursive(node);
        }
    </ul>
</div>

@*Here is specified the rendering for the sub levels*@
@helper RenderSubLevelsRecursive(DocumentTreeNode node)
{
    <li>
        @if (node.IsFolder)
        {
            if (Model.RenderParent)
            {
                <div class="folder mt-1">
                    <i class="fas fa-folder-open"></i> <span class="title">@node.Title</span>
                </div>
            }
        }
        else
        {
            var icon = this.GetIconClassName(node.Extension);

            <a href="@node.NavigateUrl" target="@node.Target" class="document">
                <i class="@icon ext-@node.Extension"></i>
                <span class="title">@node.Title</span>
            </a>
        }


        @if (node.Nodes.Count > 0)
        {
            <ul class="">
                @foreach (var childNode in node.Nodes)
                {
                    @RenderSubLevelsRecursive(childNode)
                }
            </ul>
        }
    </li>
}

