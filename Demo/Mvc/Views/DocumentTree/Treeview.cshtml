@model RandomSiteControlsMVC.MVC.Models.DocumentTree.DocumentTreeModel

@using Telerik.Sitefinity.Modules.Pages;
@using Telerik.Sitefinity.Frontend.Mvc.Helpers;
@using Telerik.Sitefinity;
@using Telerik.Sitefinity.Mvc;
@using RandomSiteControlsMVC.Helpers;
@using Telerik.Sitefinity.Services;
@using RandomSiteControlsMVC.MVC.Models.DocumentTree

@Html.Script(ScriptRef.JQuery, RSCUtil.SfsConfig.jQueryScriptPlaceholder)

@Html.Script("/Mvc/Views/DocumentTree/Resources/documenttree.js", RSCUtil.SfsConfig.DefaultScriptPlaceholder)
@Html.StyleSheet("/Mvc/Views/DocumentTree/Resources/documenttree.min.css", "head")

@{
    var parentName = "accordian-" + Guid.NewGuid().ToString();
}

@*@Html.Script(Url.EmbeddedResource("RandomSiteControlsMVC.Reference", "RandomSiteControlsMVC.MVC.Views.DocumentTree.Resources.documenttree.es5.min.js"), RSCUtil.SfsConfig.DefaultScriptPlaceholder)
    @Html.StyleSheet(Url.EmbeddedResource("RandomSiteControlsMVC.Reference", "RandomSiteControlsMVC.MVC.Views.DocumentTree.Resources.documenttree.min.css"), "head")*@

<div class="sfs-document-tree treeview" data-mode="treeview" data-expand-levels="@Model.ExpandLevelDepth">
    <div id="@parentName">
        @{
            var index = 0;
        }
        @foreach (var node in Model.Nodes)
        {
            @RenderRootNodes(node, parentName, index, parentName);
            index++;
        }
    </div>
</div>


@helper RenderRootNodes(DocumentTreeNode node, string parentName, int index, string name)
{
    var id = $"root-{Guid.NewGuid().ToString()}";

    <div class="">
        @if (Model.RenderParent)
        {
        <div class="" id="@($"heading-{id}")">
            <button class="btn btn-link pl-0 pr-0" data-toggle="collapse" data-target="#@(id)" aria-expanded="true" aria-controls="@(id)">
                <i class="fas fa-folder-open"></i> @node.Title
            </button>
        </div>
        }
        <div id="@(id)" class="collapse show @(!Model.Animated ? "disable-animation" : "")" aria-labelledby="@($"heading-{id}")" data-parent="#@parentName">
            <ul class="">
                @{ 
                    var childIndex = 0;
                }
                @foreach (var childNode in node.Nodes)
                {
                    @RenderSubLevelsRecursive(childNode, id, index, childIndex, name)
                    childIndex++;
                }
            </ul>
        </div>
    </div>
}


@helper RenderSubLevelsRecursive(DocumentTreeNode node, string parentName, int index, int childIndex, string name)
{
var id = $"child-{Guid.NewGuid().ToString()}";

<li>
    @if (node.IsFolder)
    {
        <button class="btn btn-link pl-0 pr-0" data-toggle="collapse" data-target="#@(id)" aria-expanded="true" aria-controls="@(id)">
            <i class="fas fa-folder-open"></i> @node.Title
        </button>
    }
    else
    {
        var icon = "far fa-file";
        <a href="@node.NavigateUrl" target="@node.Target" class="document">
            <i class="@icon ext-@node.Extension"></i>
            <span class="title">@node.Title</span>
        </a>
    }


    @if (node.Nodes.Count > 0)
    {
        <div id="@(id)" class="collapse show @(!Model.Animated ? "disable-animation" : "")" aria-labelledby="@($"heading-{id}")" data-parent="#@parentName">
            <ul class="">
                @foreach (var childNode in node.Nodes)
                {
                    @RenderSubLevelsRecursive(childNode, parentName, index, childIndex, name)
                }
            </ul>
        </div>
    }
    </li>
}

