@model Telerik.Sitefinity.Frontend.Navigation.Mvc.Models.INavigationModel

@using Telerik.Sitefinity.Frontend.Mvc.Helpers;
@using Telerik.Sitefinity.Frontend.Navigation.Mvc.Models;
@using Telerik.Sitefinity.Modules.Pages;

@foreach (var node in Model.Nodes)
{
@RenderRootLevelNode(node);
}


@*Here is specified the rendering for the root level*@
@helper RenderRootLevelNode(NodeViewModel node)
{
    if (node.ChildNodes.Count > 0)
    {
        <li class="side-nav-item @GetClass(node)">
            <a class="nav-link dropdown-toggle" href="#" id='@Html.UniqueId("navbarDropdownMenuLink")' data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">@node.Title</a>
            <ul class="dropdown-menu" aria-labelledby='@Html.UniqueId("navbarDropdownMenuLink")'>
                @RenderSubLevelsRecursive(node)
            </ul>
        </li> 
    }
    else
    {
        <!-- Current: "bg-gray-900 text-white", Default: "text-gray-300 hover:bg-gray-700 hover:text-white" -->
        <a href="@node.Url" class="text-gray-300 hover:bg-gray-700 hover:text-white group flex items-center px-2 py-2 text-sm font-medium rounded-md @GetClass(node)" target="@node.LinkTarget">
            <!-- Current: "text-gray-300", Default: "text-gray-400 group-hover:text-gray-300" -->
            <!-- Heroicon name: outline/home -->
            @if (!String.IsNullOrEmpty(node.CustomFields.IconSVGMarkup))
            {
                <svg class="text-white-300 mr-3 h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                @Html.Raw(node.CustomFields.IconSVGMarkup)
                </svg>
            }
            else
            {
                <svg class="text-gray-300 mr-3 h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4" />
                </svg>   
            }
            @node.Title
        </a>
    }
}

@*Here is specified the rendering for all child levels*@
@helper RenderSubLevelsRecursive(NodeViewModel node)
{
    foreach (var childNode in node.ChildNodes)
    {
        if (childNode.ChildNodes.Count > 0)
        {
            <li class="dropdown-submenu">
                <a class="dropdown-item @GetClass(childNode)" href="@childNode.Url" target="@childNode.LinkTarget">
                    @childNode.Title
                    <span class="right-caret"></span>
                </a>
                <ul class="dropdown-menu">
                    @RenderSubLevelsRecursive(childNode)
                </ul>
            </li> 
        }
        else
        {
        <li>
            <a class="dropdown-item @GetClass(childNode)" href="@childNode.Url" target="@childNode.LinkTarget">@childNode.Title</a>
        </li>}
        }
}

@*Resolves the class that will be added for each node depending whether it is selected*@
@helper GetClass(NodeViewModel node)
{if (node.IsCurrentlyOpened)
    {
@Html.HtmlSanitize("bg-gray-900 text-white group flex items-center px-2 py-2 text-sm font-medium rounded-md");
}
else if (node.HasChildOpen)
{
@Html.HtmlSanitize("bg-gray-900 text-white group flex items-center px-2 py-2 text-sm font-medium rounded-md");
}
}
